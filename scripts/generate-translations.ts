import { isObject } from 'lodash'
import { existsSync, mkdirSync, readFileSync, writeFileSync } from 'node:fs'
import { join } from 'node:path'
import { fileURLToPath } from 'node:url'
import { inspect } from 'node:util'
import { Plugin } from 'vite'

const translationsFile = fileURLToPath(
  new URL('../src/i18n/translations.json', import.meta.url),
)
const outputDir = fileURLToPath(
  new URL('../src/i18n/generated', import.meta.url),
)

export function generateTranslations(): Plugin {
  splitTranslations()

  return {
    name: 'generate-translations',
    apply: 'serve',
    configureServer(server) {
      server.watcher.on('change', (filePath) => {
        if (filePath === translationsFile) {
          try {
            splitTranslations()
          } catch (e) {
            console.error('Failed to generate translations:', e)
          }
        }
      })
    },
  }
}

function splitTranslations() {
  if (!existsSync(outputDir)) {
    mkdirSync(outputDir, { recursive: true })
  }

  const translationsJson = readFileSync(translationsFile, 'utf-8')
  const languages = Object.keys(
    JSON.parse(translationsJson).essentials.language,
  )
  const essentials: Record<string, Record<string, unknown>> = {}

  for (const language of languages) {
    const languageTranslations = JSON.parse(translationsJson, (key, value) => {
      if (
        isObject(value) &&
        Object.keys(value).some((key) => languages.includes(key))
      ) {
        return value[language] || '__NOT_TRANSLATED__'
      }
      return value
    })

    essentials[language] = languageTranslations.essentials
    delete languageTranslations.essentials

    writeTsFile(`${language}.ts`, languageTranslations)
  }

  writeTsFile(`essentials.ts`, essentials)

  console.log(`Translations generated for ${languages.join(', ')}`)
}

function writeTsFile(filename: string, jsonObject: Record<string, unknown>) {
  const filePath = join(outputDir, filename)

  const literalObject = inspect(jsonObject, {
    depth: 100,
    maxStringLength: Infinity,
    breakLength: Infinity,
    sorted: false,
    compact: false,
  })

  const content = `// This file is auto-generated by generate-translations.ts, do not edit it directly.
export default ${literalObject} as const`

  if (existsSync(filePath) && readFileSync(filePath, 'utf-8') === content) {
    // skip writing to avoid unnecessary hot reloads
    return
  }
  writeFileSync(filePath, content, 'utf-8')
}
